//
// Define a set of common settings for all projects, and include
// all the 2.11 projects. The included file also contains a large set of
// vars definitions, which are used later in this file as well.
//


vars.base: {
}
include file("common.conf")

//
// And the generation of the artifacts more closely related to the Scala compiler.
//
build += {
  extraction-version: "2.11.12"
  cross-version: disabled
  sbt-version: ${vars.sbt-version}
  projects: [
  // Scala 2.11.x
  {
    name:  "scala"
    system: assemble
    extra.parts: {
      cross-version: standard
      sbt-version: ${vars.sbt-version}
      extraction-version: "2.11.12"
      cross-version: disabled
    }
    extra.parts.projects: [
      {
        system: "scala"
        name:  "scala"
        uri:    "https://github.com/"${vars.scala-ref}
        extra.build-options: ["-Dlocker.skip=1", "-Ddocs.skip=1"] // speed things up a little
      }
      {
        name: "scala-xml"
        uri: "https://github.com/"${vars.scala-xml-ref}
        extra.commands: [
          // override scalaVersion in the modules since otherwise we get
          // whatever random Scala version the module has -- it might be a
          // 2.12.x version, we don't want that!
          "set every scalaVersion := \"2.11.12\""
          // work around https://github.com/scala/community-builds/issues/575
          // (in a community build context, we don't need MiMa to run)
          "set every ScalaModulePlugin.mimaPreviousVersion := None"
        ]
        extra.projects: ["xml"]
      }
      {
        name: "scala-parser-combinators"
        uri: "https://github.com/"${vars.scala-parser-combinators-ref}
        extra.sbt-version: "1.2.8"
        extra.commands: [
          // override scalaVersion in the modules since otherwise we get
          // whatever random Scala version the module has -- it might be a
          // 2.12.x version, we don't want that!
          "set every scalaVersion := \"2.11.12\""
          // work around https://github.com/scala/community-builds/issues/575
          // (in a community build context, we don't need MiMa to run)
          "set every ScalaModulePlugin.mimaPreviousVersion := None"
        ]
        extra.projects: ["scala-parser-combinators"]   // no JS or Native
      }
    ]
  }

  ${vars.base} {
    name: "scala-continuations"
    uri: "https://github.com/"${vars.scala-continuations-ref}
    // Trying to avoid unexplained error on Toolbox based tests: "bad option: -P:continuations:enable"
    // This is reproducible outside of dbuild, but hard to pin down.
    // Example: https://gist.github.com/retronym/9122414
    // Note the plugin JAR was rebuild on inspect `test:test`, even though there was no source change.
    // After that, the next `test` worked.
    extra.commands: ["clean", "plugin/compile:package"]
  }

  // ${vars.base} {
  //   name: "scala-partest"
  //   uri: "https://github.com/"${vars.scala-partest-ref}
  // }

  ${vars.base} {
    name: scalacheck
    uri:    "https://github.com/"${vars.scalacheck-ref}
    extra.run-tests: false
  }

  ${vars.base} {
    name: "scala-swing"
    uri: "https://github.com/"${vars.scala-swing-ref}
    extra.commands: ${vars.default-commands} [
      // work around https://github.com/scala/community-builds/issues/575
      // (in a community build context, we don't need MiMa to run)
      "set every ScalaModulePlugin.mimaPreviousVersion := None"
    ]
  }
]
}
